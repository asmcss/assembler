/*
 * Copyright 2021 Zindex Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@import "../../node_modules/sass-math-pow/sass/index";

@function getColor($color, $intensity, $isGray: false) {
    $intensityMap: (
         50: (c: #fff, w: 80),
        100: (c: #fff, w: 60),
        200: (c: #fff, w: 40),
        300: (c: #fff, w: 20),
        400: (c: #fff, w: 10),
        500: (c: #000, w: 0),
        600: (c: #000, w: 10),
        700: (c: #000, w: 30),
        800: (c: #000, w: 50),
        900: (c: #000, w: 70),
    );
    @if $isGray == true {
        $intensityMap: (
                50: (c: #fff, w: 95),
                100: (c: #fff, w: 90),
                200: (c: #fff, w: 82),
                300: (c: #fff, w: 68),
                400: (c: #fff, w: 32),
                500: (c: #000, w: 0),
                600: (c: #000, w: 26),
                700: (c: #000, w: 39),
                800: (c: #000, w: 58),
                900: (c: #000, w: 79),
        );
    }
    @if map-has_key($intensityMap, $intensity) {
        $v: map-get($intensityMap, $intensity);
        @return mix(map-get($v, c), $color, map-get($v, w));
    }
    @return mix(#000, $color, 0);
}

@function getTextColor($color) {
    $d: (red($color), green($color), blue($color));
    $s: ();
    @each $c in $d {
        $c: $c / 255;
        @if $c < 0.03928 {
            $c: $c / 12.92;
        } @else {
            $c: poly-pow(($c + 0.055) / 1.055, 2.4);
        }
        $s: append($s, $c);
    }
    $l: 0.2126 * nth($s, 1) + 0.7152 * nth($s, 2) + 0.0722 * nth($s, 3);
    @if $l > 0.179 {
        @return #000;
    }
    @return #fff;
}

@function setElevation($i, $elevation-umbra-map, $elevation-penumbra-map, $elevation-ambient-map) {
    $umbra: map-get($elevation-umbra-map, $i);
    $penumbra: map-get($elevation-penumbra-map, $i);
    $ambient: map-get($elevation-ambient-map, $i);
    $result: #{$umbra} var(--elevation-umbra),
    #{$penumbra} var(--elevation-penumbra),
    #{$ambient} var(--elevation-ambient);
    @return $result;
}

@function implode-list($list, $separator: '') {
    $len: length($list);

    @if $len==0 {
        @return ''
    }

    $ret: nth($list, 1);

    @for $i from 2 through $len {
        $ret: $ret + $separator + nth($list, $i);
    }

    @return $ret;
}